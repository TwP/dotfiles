"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
set rtp+=$GOROOT/misc/vim
call vundle#begin()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" My Bundles
Bundle 'tpope/vim-surround'
" Bundle 'tpope/vim-fugitive'
" Bundle 'tpope/vim-rails'
" Bundle 'tpope/vim-rake'
" Bundle 'Lokaltog/vim-powerline'
Bundle 'godlygeek/tabular'
Bundle 'plasticboy/vim-markdown'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'edsono/vim-matchit'
Bundle 'kien/ctrlp.vim'
Bundle 'zerowidth/vim-copy-as-rtf'
" Bundle 'rking/ag.vim'
" Bundle 'kana/vim-textobj-user'
" Bundle 'nelstrom/vim-textobj-rubyblock'
" Bundle 'slim-template/vim-slim'

"load ftplugins and indent files
call vundle#end()
filetype plugin indent on

source $HOME/.vim/settings/basic.vim
source $HOME/.vim/settings/statusline.vim

"map to bufexplorer
nnoremap <C-B> :BufExplorer<cr>

"map Q to something useful
noremap Q gq

"make Y consistent with C and D
nnoremap Y y$

"mark syntax errors with :signs
let g:syntastic_enable_signs=1

"visual search mappings
function! s:VSetSearch()
    let temp = @@
    norm! gvy
    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR>


"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction

"define :HighlightLongLines command to highlight the offending parts of
"lines that are longer than the specified length (defaulting to 80)
command! -nargs=? HighlightLongLines call s:HighlightLongLines('<args>')
function! s:HighlightLongLines(width)
    let targetWidth = a:width != '' ? a:width : 79
    if targetWidth > 0
        exec 'match Todo /\%>' . (targetWidth) . 'v/'
    else
        echomsg "Usage: HighlightLongLines [natural number]"
    endif
endfunction

let mapleader = ','

" from aniero http://gist.github.com/179452
noremap <D-r> :NERDTreeToggle<CR>
noremap <D-R> :NERDTreeFind<CR>
noremap <D-i> :TlistToggle<CR>
nnoremap <D-8> :nohls<CR>
inoremap <D-8> <C-o>:nohls<CR>

let g:fuzzy_ignore = "gems*;pkg/*"
let g:NERDSpaceDelims = 1

let NERDTreeChDirMode=2 " auto-change CWD when changing tree root

let g:user_zen_settings = {
\    'indentation' : '  '
\}

function! WhitespaceCleanup() range
    "Step through each line in the range...
    for linenum in range(a:firstline, a:lastline)
        let line = getline(linenum)
        let line = substitute(line, '\s\+$', '', '')
        let line = substitute(line, '\t', '  ', 'g')
        call setline(linenum, line)
    endfor

    if a:lastline > a:firstline
        echo "Whitespace cleanup for" (a:lastline - a:firstline + 1) "lines"
    endif
endfunction

command! Tr  :1,$call WhitespaceCleanup()
command! Nt  :NERDTreeToggle
command! Ntm :NERDTreeMirror
command! Tl  :TlistToggle

" move between splits
map <C-j> <C-w>j<C-w>_
map <C-k> <C-w>k<C-w>_
map <C-h> <C-w>h
map <C-l> <C-w>l
map <C-_> <C-w>_
map <C-up> <C-w>K
map <C-down> <C-w>J
map <C-left> <C-w>H
map <C-right> <C-w>L

nnoremap <D-Esc> :set invfullscreen<CR>
inoremap <D-Esc> <C-O>:set invfullscreen<CR>

" from http://pastie.org/359759 / evan phoenix
function! CleverTab()
    if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
        return "\<Tab>"
    else
        return "\<C-N>"
endfunction
inoremap <Tab> <C-r>=CleverTab()<CR>

" ----- syntax copying for presentations -----

" tell TOhtml to disable line numbering when generating HTML
let g:html_number_lines=0
" and to use a reasonable font
let g:html_font="Andale Mono"

""" Disable folding in markdown files
let g:vim_markdown_folding_disabled=1
