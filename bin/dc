#!/bin/sh
#/ Usage: dc <command> [args]
#/
#/   Useful shortcuts for working with `docker` and `docker-compose`.
#/
#/   `dc` also accepts `docker-compose` commands in addition to the commands
#/   listed below. In this sense the `dc` script acts as a shorthand notation
#/   for the more lengthy `docker-compose`.
#/
#/   COMMANDS:
#/     clean            Remove stopped containers and dangling images
#/     console <image>  Attach a bash console to a running container
#/     cycle   <image>  Stop a container and then start it up again
#/     ports   <image>  Show mapped ports for a running container
#/     prune            Remove stopped containers and unused images
#/     ready            Wait until Docker is running and ready
#/     rebuild <image>  Build the image, stop, and then start the container
#/     activate         Start the Docker for Mac application
#/     deactivate       Stop the Docker for Mac application
#/     screen           Attach a `screen` session to the Docker VM
#/     -h, --help       Show this message.
#/
#/   EXAMPLES:
#/     dc clean
#/     dc console 170fe7469429
#/     dc cycle mysql
#/     dc ports elasticsearch
#/     dc rebuild redis
#/     dc --file docker-compose.test.yml up -d
#/
#------------------------------------------------------------------------------

DOCKER_STARTUP_WAIT_TIME=60 # seconds

usage() {
  grep '^#/' <"$0" | cut -c 4-
}

dc_clean() {
  docker rm $(docker ps -aqf status=exited) 2>/dev/null || true
  docker rmi $(docker images -qf dangling=true) 2>/dev/null || true
}

dc_prune() {
  docker container prune -f
  docker image prune -f
}

dc_ready() {
  dc_activate
  counter=0

  echo "Waiting for Docker to be ready ...\c"
  until docker info > /dev/null 2>&1; do
    counter=$((counter+1))
    if [ $counter -gt $DOCKER_STARTUP_WAIT_TIME ]; then
      echo "\n-- Docker startup took longer than ${DOCKER_STARTUP_WAIT_TIME} seconds - exiting!"
      exit 1
    fi
    sleep 1
  done
  echo " OK!"
}

dc_console() {
  docker exec -it "$1" /bin/bash
}

dc_cycle() {
  docker-compose stop "$@" &&
  docker-compose up -d "$@"
}

dc_ports() {
  docker ps --filter name="$1" --format "{{.Names}}: {{.Ports}}"
}

dc_rebuild() {
  docker-compose build "$@" &&
  docker-compose stop "$@" &&
  docker-compose up -d "$@"
}

dc_activate() {
  open "/Applications/Docker.app"
}

dc_deactivate() {
  osascript -e "quit app \"docker\"" -e "quit app \"docker desktop\""
}

dc_screen() {
  screen "${HOME}/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty"
}

if [ $# -gt 0 ]; then
  case "$1" in
    -h | --help ) usage ;;
    clean ) dc_clean ;;
    console ) shift && dc_console "$@" ;;
    cycle ) shift && dc_cycle "$@" ;;
    ports ) shift && dc_ports "$@" ;;
    prune ) dc_prune ;;
    ready ) dc_ready ;;
    rebuild ) shift && dc_rebuild "$@" ;;
    activate ) dc_activate ;;
    deactivate ) dc_deactivate ;;
    screen ) dc_screen ;;
    *) docker-compose "$@" ;;
  esac
else
  docker-compose
fi
