#!/usr/bin/env bash
#/ Usage: dc <command> [args]
#/
#/   Useful shortcuts for working with `docker` and `docker-compose`.
#/
#/   `dc` also accepts `docker-compose` commands in addition to the commands
#/   listed below. In this sense the `dc` script acts as a shorthand notation
#/   for the more lengthy `docker-compose`.
#/
#/   COMMANDS:
#/     clean            Remove stopped containers and dangling images
#/     console <image>  Attach a bash console to a running container
#/     cycle   <image>  Stop a container and then start it up again
#/     ports   <image>  Show mapped ports for a running container
#/     prune            Remove stopped containers and unused images
#/     rebuild <image>  Build the image, stop, and then start the container
#/     activate         Start the Docker for Mac application
#/     deactivate       Stop the Docker for Mac application
#/     screen           Attach a `screen` session to the Docker VM
#/     -h, --help       Show this message.
#/
#/   EXAMPLES:
#/     dc clean
#/     dc console 170fe7469429
#/     dc cycle mysql
#/     dc ports elasticsearch
#/     dc rebuild redis
#/     dc --file docker-compose.test.yml up -d
#/
#------------------------------------------------------------------------------

function usage {
  grep '^#/' <"$0" | cut -c 4-
}

function dc_clean {
  docker rm $(docker ps -aqf status=exited) 2>/dev/null || true
  docker rmi $(docker images -qf dangling=true) 2>/dev/null || true
}

function dc_prune {
  docker container prune -f
  docker image prune -f
}

function dc_console {
  docker exec -it "$1" /bin/bash
}

function dc_cycle {
  docker-compose stop "$@" &&
  docker-compose up -d "$@"
}

function dc_ports {
  docker ps --filter name="$1" --format "{{.Names}}: {{.Ports}}"
}

function dc_rebuild {
  docker-compose build "$@" &&
  docker-compose stop "$@" &&
  docker-compose up -d "$@"
}

function dc_activate {
  open "/Applications/Docker.app"
}

function dc_deactivate {
  osascript -e "quit app \"docker\""
}

function dc_screen {
  screen "${HOME}/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty"
}

if [[ $# > 0 ]]; then
  case "$1" in
    --help )
      usage
      ;;
    -h )
      usage
      ;;
    clean )
      dc_clean
      ;;
    console )
      shift
      dc_console "$@"
      ;;
    cycle )
      shift
      dc_cycle "$@"
      ;;
    ports )
      shift
      dc_ports "$@"
      ;;
    prune )
      dc_prune
      ;;
    rebuild )
      shift
      dc_rebuild "$@"
      ;;
    activate )
      dc_activate
      ;;
    deactivate )
      dc_deactivate
      ;;
    screen )
      dc_screen
      ;;
    *)
      docker-compose "$@"
      ;;
  esac
else
  docker-compose
fi
