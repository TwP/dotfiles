#!/usr/bin/ruby

require 'rubygems'
require 'highline'
require 'expect'
require 'optparse'
require 'yaml'


DEFAULT_CONFIG = {
  'username' => nil,
  'daemon' => false,
  'pid_file' => '/var/run/vpn.pid',
  'vpn' => {
    'client' => '/usr/local/bin/vpnclient',
    'profile' => 'default',
    'keep_alive_host' => nil
  }
}

class VpnConnector

  attr_reader :vpn_password

  def initialize( config )
    @config = config.dup
    ask_for_vpn_password
  end

  def username
    @config['username']
  end

  def vpn_client
    @config['vpn']['client']
  end

  def vpn_profile
    @config['vpn']['profile']
  end

  def vpn_keep_alive_host
    @config['vpn']['keep_alive_host']
  end

  def connect
    cmd = "ruby -e 'STDOUT.puts $$; STDOUT.flush; exec \"#{vpn_client} connect #{vpn_profile}\"'"
    @vpn = IO.popen cmd, "r+"
    @pid = Integer(@vpn.readline.chomp.strip)

    if expect %r/Username\s+\[[^\]]*\]:\s+/
      @vpn.puts username
    else raise "stuck at 'Username' prompt" end

    if expect %r/Password\s+\[\]:\s+/
      @vpn.puts vpn_password
    else raise "stuck at 'Password' prompt" end

    if expect %r/Do you wish to continue\? \(y\/n\):\s+/
      @vpn.puts "y"
    else raise "authentication failed" end

    unless expect %r/Your VPN connection is secure\./
      raise "authentication failed"
    end
  end

  def keep_alive
    @thread = Thread.new do
      loop {
        sleep(rand * 600)    # sleep for at most 10 minutes
        system "ping -w 5 #{vpn_keep_alive_host} 2>&1 > /dev/null" if vpn_keep_alive_host
      }
    end
  end

  def join
    @thread.join
  end

  def stop
    @thread.kill
    Process.kill 'INT', @pid
    @vpn.close
  end

  def ask_for_vpn_password
    @vpn_password = HighLine.new.ask("[vpn] password for #{username}: ") {|q| q.echo = false}
  end

  def expect( rgxp )
    @vpn.expect(rgxp, 5)
  end
end  # class VpnConnector


class Main
  def self.run( args )
    self.new.run args
  end

  attr_reader :options

  def initialize
    @options = {
      :force => false,
      :daemon => false,
      :action => :connect,
      :debug => false
    }
    load_config
    @options[:daemon] = @config['daemon']
  end

  def load_config
    fn = File.expand_path '~/.vpnrc'
    @config = test(?f, fn) ? YAML.load_file(fn) : DEFAULT_CONFIG
  end

  def save_config
    fn = File.expand_path '~/.vpnrc'
    File.open(fn, 'w') {|fd| fd.write(YAML.dump(@config))}
    File.chmod(0600, fn)
  end

  def run( args )
    STDOUT.sync = true

    parse args.dup

    case options[:action]
    when :connect
      run_as_root args
      connect
    when :disconnect
      run_as_root args
      disconnect
    when :reconnect
      run_as_root args
      disconnect
      connect
    when :status
      status
    else
      raise "unknown action '#{options[:action]}'"
    end
  end

  def parse( args )
    opts = OptionParser.new
    opts.banner = 'Usage: vpn [options] <disconnect | reconnect | status>'

    opts.separator ''
    opts.on('-u', '--username USERNAME', String, 'VPN username') { |value|
      options[:username] = value
    }
    opts.on('-p', '--profile PROFILE', String, 'VPN connection profile') { |value|
      options[:profile] = value
    }

    opts.separator ''
    opts.on('-d', '--daemon', 'start the VPN client in daemon mode') {
      options[:daemon] = true
    }
    opts.on('-f', '--force', 'ignore the presence of a PID file') {
      options[:force] = true
    }
    opts.on('--debug', 'show debugging messages (will not daemonize)') {
      $expect_verbose = true
      options[:debug] = true
    }

    opts.separator ''
    opts.separator 'common options:'

    opts.on_tail( '-h', '--help', 'show this message' ) do
      STDOUT.puts opts
      exit
    end

    opts.parse! args
    options[:daemon] = false if debug?
    options[:action] = args.first.to_sym unless args.empty?

    @config['username'] = options[:username] if options.has_key?(:username)
    @config['vpn']['profile'] = options[:profile] if options.has_key?(:profile)

    unless @config['username']
      STDOUT.puts 'A username was not supplied'
      STDOUT.puts
      STDOUT.puts opts
      exit 1
    end

    save_config
  end

  def debug?
    options[:debug]
  end

  def force?
    options[:force]
  end

  def daemon?
    options[:daemon]
  end

  def pid_file
    @config['pid_file']
  end

  def vpn_keep_alive_host
    @config['vpn']['keep_alive_host']
  end

  def status
    if test(?f, pid_file)
      if vpn_keep_alive_host and system("ping -w 5 #{vpn_keep_alive_host} 2>&1 > /dev/null" )
        STDOUT.puts "Your VPN connection appears to be running."
        return
      end
      if !vpn_keep_alive_host
        STDOUT.puts "Your VPN connection appears to be running."
        return
      end
    end
    STDOUT.puts "Your VPN connection does not appear to be running."
  end

  def connect
    if test(?f, pid_file) and !force?
      STDOUT.puts "Your VPN connection appears to be running."
      return
    end

    vpn = VpnConnector.new @config

    daemonize do |wr|
      begin
        vpn.connect
        vpn.keep_alive

        Signal.trap('INT') {vpn.stop}

        File.open(pid_file, 'w') {|fd| fd.puts $$}
        if wr
          wr.write $$
          wr.close
        else
          STDOUT.puts "Your VPN connection is secure."
        end
        vpn.join
      ensure
        File.delete(pid_file)
      end
    end
  end

  def disconnect
    unless test(?f, pid_file)
      STDOUT.puts "Your VPN connection does not appear to be running."
      return
    end

    pid = Integer(File.read(pid_file).chomp.strip)
    Process.kill 'INT', pid

    STDOUT.puts "Your VPN connection has been closed."
  end

  def daemonize
    return yield(nil) unless daemon?

    rd, wr = IO.pipe
    srand
    if fork
      wr.close
      pid = rd.read
      rd.close

      if test(?f, pid_file) and pid == File.read(pid_file).chomp.strip
        STDOUT.puts "Your VPN connection is secure."
      else
        STDOUT.puts "Could not establish VPN connetion. " +
                    "Try running again in debug mode for more information."
      end
    else
      unless sess_id = Process::setsid
        raise 'Cannot detach from controlled terminal'
      end

      fork do
        rd.close
        Dir::chdir '/'
        File::umask 0000
        STDIN.reopen '/dev/null'
        STDOUT.reopen '/dev/null', 'a'
        STDERR.reopen STDOUT

        yield wr
        exit
      end
      exit!
    end
    exit!
  end

  def run_as_root( args )
    unless ENV['USER'] == 'root'
      STDOUT.puts "sudo #{$0} #{args.join ' '}" if debug?
      exec "sudo -p '[sudo] password for %u: ' #{$0} #{args.join ' '}"
    end
  end
end  # class Main

Main.run ARGV

# EOF
